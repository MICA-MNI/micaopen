from psychopy import visual, core, event
from numpy.random import randint, shuffle
import numpy as np

from psychopy import core, event, logging, visual, gui, data
import time
import numpy as np
import sys, os, errno # to get file system encoding
import csv

def setDir():
    _thisDir = os.path.dirname(os.path.abspath(__file__)).decode(sys.getfilesystemencoding())
    os.chdir(_thisDir)
    return _thisDir

def set_window(fullscr=False, gui=True, color=1):
    if fullscr:
        gui = False
    win = visual.Window(size=(1280, 720), color=color, fullscr=fullscr, allowGUI=gui, winType='pyglet', monitor='testMonitor', units ='pix', screen=0)
    return win
def timelog(datalog_fn): 
    logFile = logging.LogFile(datalog_fn+'.log', level=logging.EXP)
    logging.console.setLevel(logging.WARNING) 

def info_gui(expName, expInfo):
    infoDlg = gui.DlgFromDict(expInfo, title = '%s Subject details:'%(expName)) #set the name of the pop up window
    expInfo['date'] = data.getDateStr()  # add a simple timestamp to the experiment
    expInfo['expName'] = expName
    datalog_fn = 'data_' + expName + os.sep  + '%s_%s_%s_%s' %(expInfo['subject'], expInfo['session'], expName, expInfo['date'])
    def make_sure_path_exists(path):
        try:
            os.makedirs(path)
        except OSError as exception:
            if exception.errno != errno.EEXIST:
                raise    
    make_sure_path_exists('data_' + expName)
    timelog(datalog_fn)
    if infoDlg.OK == False: #stop experiment if press cancel 
        print 'User Cancelled'
        core.quit()  # user pressed cancel
    return expInfo, datalog_fn

def load_conditions_dict(csvFile='test.csv'):
    reader = csv.DictReader(open(csvFile))
    trials = []
    for row in reader:
        trials.append(row)
    return trials

def open_datalog(datalog_fn, dataformat='_behave.csv', headers='nBack,TrialInd,keyResp,ANS,CORR,RT,IDNO,Session\n'):
    f = open(datalog_fn + dataformat, 'w+') # create log file
    f.write(headers) # write headers
    return f

def write_datalog(f, data):
    f.write(data)
    f.flush()
    return f

def quitEXP(endExpNow):
    if endExpNow:
        print 'User Cancelled'
        core.quit()

def get_keyboard(myClock,win, respkeylist):
    keyResp = None
    thisRT = np.nan
    keylist = ['escape', 'q'] + respkeylist
    for key, RT in event.getKeys(keyList=keylist, timeStamped=myClock):
        if key in ['escape','q']:
            quitEXP(True)
        else:
            keyResp = key
            thisRT = RT
    return keyResp, thisRT

#######################################################################################################################    
#fMRI related modules
def setup_input(input_method):
    """
    If input_method is 'keyboard', we don't do anything
    If input_method is 'serial', we set up the serial port for fMRI responses
    """
    if input_method == 'keyboard':
        # Don't do anything
        resp_device = None
    elif input_method == 'serial':
        # Serial - we need to set it up
        import serial
        if sys.platform == 'linux2':
            port = '/dev/ttyS0'
        else:
            port = 'COM1'
        resp_device = serial.Serial(port=port, baudrate=9600)
        resp_device.setTimeout(0.0001)
    else:
        raise Exception('Unknown input method')
    return resp_device

def clear_buffer(input_method, resp_device):
    """
    Clear whichever buffer is appropriate for our input method
    """
    if input_method == 'keyboard':
        # Clear the keyboard buffer
        event.clearEvents()
    else:
        # Clear the serial buffer
        resp_device.flushInput()

def scanner(in_scanner=False):
    if in_scanner:
        import ynicstim.parallel_compat
        import ynicstim.trigger
        port = '/dev/parport0'
        p = ynicstim.parallel_compat.getParallelPort(port)
        ts = ynicstim.trigger.ParallelInterruptTriggerSource(port=p)
        trig_collector = ynicstim.trigger.TriggerCollector(triggersource=ts, slicespervol=slices_per_vol)
    else:
        trig_collector = None
    return trig_collector



def get_LRresponse(input_method, resp_device, timeStamped,trig_collector,win):
    #if participants don't respond we will set up a null value so we don't get an error
    thisResp = None
    thisRT = np.nan
    if input_method == 'keyboard':
        for key, RT in event.getKeys(keyList = ['escape', 'q', 'left', 'right'], timeStamped = timeStamped): # changed allowed keys here for trial list
            if key in ['escape','q']:
                endExpNow = True
                
                if trig_collector:
                    trig_collector.endCollection()
                quitEXP(endExpNow)
            else:
                thisResp = key
                thisRT = timeStamped.getTime()
    else:
        thisResp = resp_device.read(1)
        thisRT = timeStamped.getTime()
        if len(thisResp) == 0:
            thisResp = None
            thisRT = np.nan
        else:
            # Map button numbers to side
            ## Blue == 1, Green == 3
            if thisResp in ['1', '2']: 
                thisResp = 'left'
            elif thisResp in ['3', '4']:
                thisResp = 'right'
        # Quickly check for a 'q' response on the keyboard to quit
        for key, RT in event.getKeys(keyList = ['escape', 'q'], timeStamped = timeStamped):
            if key in ['escape', 'q']:
                trials.saveAsText(datalog_fn + '_data.csv')
                if trig_collector:
                    trig_collector.endCollection()
                quitEXP(True)
    return thisResp, thisRT


def get_rating(input_method, resp_device, timeStamped,trig_collector,win):
    #if participants don't respond we will set up a null value so we don't get an error
    thisResp = None
    thisRT = np.nan
    if input_method == 'keyboard':
        for key, RT in event.getKeys(keyList = ['escape', 'q', '1', '2', '3', '4'], timeStamped = timeStamped):
            if key in ['escape','q']:
                print 'User Cancelled'

                if trig_collector:
                    trig_collector.endCollection()
                quitEXP(True)
            else:
                thisResp = key
                thisRT = timeStamped.getTime()
    else:
        thisResp = resp_device.read(1)
        thisRT = timeStamped.getTime()
        if len(thisResp) == 0:
            thisResp = None
            thisRT = np.nan
        else:
            pass
        # Quickly check for a 'escape' response on the keyboard to quit
        for key, RT in event.getKeys(keyList = ['escape'], timeStamped = timeStamped):
            if key in ['escape']:
                print 'User cancelled'
                trials.saveAsText(datalog_fn + '_data.csv')
                if trig_collector:
                    trig_collector.endCollection()
                quitEXP(True)
    return thisResp, thisRT



sans = ['Arial','Gill Sans MT', 'Helvetica','Verdana'] #use the first font found on this list
win = set_window(fullscr=True, gui=True, color=1)

msgTxt = visual.TextStim(win,text='default text', font= sans, name='message',
    height=62, wrapWidth=1100,
    color='black', 
    )

########################################################################################
instrTxt = visual.TextStim(win,text='default text', font= sans, name='instruction',
    pos=[-50,0], height=30, wrapWidth=1100,
    color='black',
    ) #object to display instructions

def instruction(inst_txt='Instructions/exp_instr.txt'):
    Instruction = open(inst_txt, 'r').read().split('#\n')
    Ready = open('Instructions/wait_trigger.txt', 'r').read()
    #instructions screen 
    for i, cur in enumerate(Instruction):
        instrTxt.setText(cur)
        instrTxt.draw()
        win.flip()
        if i==0:
            core.wait(np.arange(1.3,1.75,0.05)[randint(0,9)])
        else:
            event.waitKeys(keyList=['space'])

        if event.getKeys(keyList = ['escape']):
            quitEXP(True)

    instrTxt.setText(Ready)
    instrTxt.draw()
    win.flip()
    if event.getKeys(keyList = ['escape']):
        quitEXP(True)
    #need to update a scanner trigger version
    core.wait(np.arange(1.3,1.75,0.05)[randint(0,9)])
############################################################################################  

fixation = visual.TextStim(win, name='fixation', text='+', 
                            font= sans, height=62, pos=(0,0),color='black')#set pix pos

def fixation_screen(myClock, waittime=1):
    fixation.draw()
    win.logOnFlip(level=logging.EXP, msg='fixation cross on screen') #new log haoting
    win.flip()
    fixStart = myClock.getTime() #fixation cross onset
    if event.getKeys(keyList = ['escape']):
        quitEXP(True)
    core.wait(waittime)
    return fixStart
######################################################################################
im = visual.ImageStim(win, name='stimPic', image = None, size = (960, 720), )

def show_meta():
    meta_description = open('Instructions/meta_instr.txt', 'r').read()
    msgTxt.setText(meta_description)
    msgTxt.draw()
    win.flip()
def reset_output():
    keyResp = None
    thisRT = np.nan
    respRT = np.nan
    corr = np.nan
    return keyResp, thisRT, respRT, corr

def getMeta(startT, myClock):
    keyResp, thisRT, respRT, corr= reset_output()
    while keyResp==None:
        show_meta()
        keyResp, thisRT = get_keyboard(myClock,win, respkeylist=['1', '2'])
        if not np.isnan(thisRT):
            respRT = (thisRT - startT)
        else:
            pass
    keyResp = -(int(keyResp) - 2)
    return keyResp, respRT

def show_questions(thisTrial):
    im.setImage(thisTrial['testimages'])
    im.draw()
    win.flip()

def getResp(startT, myClock, thisTrial):
    keyResp, thisRT, respRT, corr = reset_output()
    while keyResp==None:
        show_questions(thisTrial)
        keyResp, thisRT = get_keyboard(myClock,win, respkeylist=['1', '2', '3', '4'])
        if not np.isnan(thisRT):
            respRT = thisRT - startT
            if keyResp == thisTrial['CorrAns']:
                corr = 1
            else:
                corr = 0
        else:
            pass
    return int(keyResp), respRT, corr

def Confidence_screen(myClock, thisTrial):
    show_meta()
    win.logOnFlip(level=logging.EXP, msg='Confidence Quesion on screen') #new log haoting
    startT = myClock.getTime()
    keyResp, respRT = getMeta(startT, myClock)
    if event.getKeys(keyList = ['escape']):
        quitEXP(True)
    return keyResp, respRT

def ans_screen(myClock, thisTrial):
    show_questions(thisTrial)
    win.logOnFlip(level=logging.EXP, msg='select answer') #new log haoting
    startT = myClock.getTime()
    keyResp, respRT, corr = getResp(startT, myClock, thisTrial)
    if event.getKeys(keyList = ['escape']):
        quitEXP(True)
    return keyResp, respRT, corr

def saveResp(f, thisTrial, expInfo, ans, rate):
    write_datalog(f, data='%s,%s,%s,%i,%f,%i,%i,%f,%s,%s\n'
        %(thisTrial['expimages'], thisTrial['testimages'], thisTrial['CorrAns'],
            ans[0], ans[1], ans[2], rate[0], rate[1],
            expInfo['subject'],expInfo['session']))
####################################################################################################################
def task(myClock, expInfo, f):
    stimuli_list = load_conditions_dict(csvFile='pictures/Episodic_ListA.csv')
    for thisTrial in stimuli_list:
        fixStart = fixation_screen(myClock, np.arange(1.3,1.75,0.05)[randint(0,9)])
        im.setImage(thisTrial['prime'])
        im.draw()
        win.flip()
        core.wait(10)
        event.clearEvents()
        startT = myClock.getTime()
        show_questions(thisTrial)
        ans = ans_screen(myClock, thisTrial)
        fixStart = fixation_screen(myClock, np.arange(0.5,1,0.05)[randint(0,10)])
        rate = Confidence_screen(myClock, thisTrial)
        saveResp(f, thisTrial, expInfo, ans, rate)

def endExp(f):
    endtxt = open('Instructions\\end_instr.txt', 'r').read().split('#\n')[0]
    msgTxt.setText(endtxt)
    msgTxt.draw()
    win.flip()
    event.waitKeys(maxWait = 20)
    logging.flush()
    f.close()
    win.close()
    core.quit()
